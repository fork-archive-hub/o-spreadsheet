// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`compile functions with lazy arguments functions call requesting lazy parameters 1`] = `
"function anonymous(deps,ref,range,ctx
) {
// =USELAZYARG(|N0|)
const _1 = () => {
	return { value: this.constantValues.numbers[0] };
}
ctx.__lastFnCalled = 'USELAZYARG';
return ctx['USELAZYARG'](_1);
}"
`;

exports[`compile functions with lazy arguments functions call requesting lazy parameters 2`] = `
"function anonymous(deps,ref,range,ctx
) {
// =USELAZYARG(|N0|/|N1|)
const _3 = () => {
	const _1 = { value: this.constantValues.numbers[0] };
	const _2 = { value: this.constantValues.numbers[1] };
	ctx.__lastFnCalled = 'DIVIDE';
	return ctx['DIVIDE'](_1, _2);
}
ctx.__lastFnCalled = 'USELAZYARG';
return ctx['USELAZYARG'](_3);
}"
`;

exports[`compile functions with lazy arguments functions call requesting lazy parameters 3`] = `
"function anonymous(deps,ref,range,ctx
) {
// =USELAZYARG(|N0|/|N0|/|N1|)
const _5 = () => {
	const _1 = { value: this.constantValues.numbers[0] };
	const _2 = { value: this.constantValues.numbers[0] };
	ctx.__lastFnCalled = 'DIVIDE';
	const _3 = ctx['DIVIDE'](_1, _2);
	const _4 = { value: this.constantValues.numbers[1] };
	ctx.__lastFnCalled = 'DIVIDE';
	return ctx['DIVIDE'](_3, _4);
}
ctx.__lastFnCalled = 'USELAZYARG';
return ctx['USELAZYARG'](_5);
}"
`;

exports[`compile functions with lazy arguments functions call requesting lazy parameters 4`] = `
"function anonymous(deps,ref,range,ctx
) {
// =USELAZYARG(USELAZYARG(|N0|))
const _2 = () => {
	const _1 = () => {
		return { value: this.constantValues.numbers[0] };
	}
	ctx.__lastFnCalled = 'USELAZYARG';
	return ctx['USELAZYARG'](_1);
}
ctx.__lastFnCalled = 'USELAZYARG';
return ctx['USELAZYARG'](_2);
}"
`;

exports[`compile functions with meta arguments function call requesting meta parameter 1`] = `
"function anonymous(deps,ref,range,ctx
) {
// =USEMETAARG(|0|)
<<<<<<< HEAD
const _1 = ref(deps[0], true, \\"USEMETAARG\\",  1);
=======
let _2 = ref(deps[0], true, "USEMETAARG",  1);
>>>>>>> 4cca20db ([IMP] packages: upgrade jest to version 29)
ctx.__lastFnCalled = 'USEMETAARG';
return ctx['USEMETAARG'](_1);
}"
`;

exports[`compile functions with meta arguments function call requesting meta parameter 2`] = `
"function anonymous(deps,ref,range,ctx
) {
// =USEMETAARG(|0|)
<<<<<<< HEAD
const _1 = ref(deps[0], true, \\"USEMETAARG\\",  1);
=======
let _2 = ref(deps[0], true, "USEMETAARG",  1);
>>>>>>> 4cca20db ([IMP] packages: upgrade jest to version 29)
ctx.__lastFnCalled = 'USEMETAARG';
return ctx['USEMETAARG'](_1);
}"
`;

exports[`expression compiler cells are converted to ranges if function require a range 1`] = `
"function anonymous(deps,ref,range,ctx
) {
// =sum(|0|)
const _1 = range(deps[0]);
ctx.__lastFnCalled = 'SUM';
return ctx['SUM'](_1);
}"
`;

exports[`expression compiler expression with $ref 1`] = `
"function anonymous(deps,ref,range,ctx
) {
// =|0|+|1|+|2|
<<<<<<< HEAD
const _1 = ref(deps[0], false, \\"ADD\\",  undefined);
const _2 = ref(deps[1], false, \\"ADD\\",  undefined);
ctx.__lastFnCalled = 'ADD';
const _3 = ctx['ADD'](_1, _2);
const _4 = ref(deps[2], false, \\"ADD\\",  undefined);
=======
let _3 = ref(deps[0], false, "ADD",  undefined);
let _4 = ref(deps[1], false, "ADD",  undefined);
ctx.__lastFnCalled = 'ADD';
let _2 = ctx['ADD'](_3, _4);
let _5 = ref(deps[2], false, "ADD",  undefined);
>>>>>>> 4cca20db ([IMP] packages: upgrade jest to version 29)
ctx.__lastFnCalled = 'ADD';
return ctx['ADD'](_3, _4);
}"
`;

exports[`expression compiler expression with references with a sheet 1`] = `
"function anonymous(deps,ref,range,ctx
) {
// =|0|
<<<<<<< HEAD
return ref(deps[0], false, \\"EQ\\",  undefined);
=======
let _1 = ref(deps[0], false, "EQ",  undefined);
return _1;
>>>>>>> 4cca20db ([IMP] packages: upgrade jest to version 29)
}"
`;

exports[`expression compiler expressions with a debugger 1`] = `
"function anonymous(deps,ref,range,ctx
) {
// =?|0|/|N0|
debugger;
<<<<<<< HEAD
const _1 = ref(deps[0], false, \\"DIVIDE\\",  undefined);
const _2 = { value: this.constantValues.numbers[0] };
=======
let _2 = ref(deps[0], false, "DIVIDE",  undefined);
let _3 = { value: this.constantValues.numbers[0] };
>>>>>>> 4cca20db ([IMP] packages: upgrade jest to version 29)
ctx.__lastFnCalled = 'DIVIDE';
return ctx['DIVIDE'](_1, _2);
}"
`;

exports[`expression compiler read some values and functions 1`] = `
"function anonymous(deps,ref,range,ctx
) {
// =|0|+sum(|1|)
<<<<<<< HEAD
const _1 = ref(deps[0], false, \\"ADD\\",  undefined);
const _2 = range(deps[1]);
=======
let _2 = ref(deps[0], false, "ADD",  undefined);
let _4 = range(deps[1]);
>>>>>>> 4cca20db ([IMP] packages: upgrade jest to version 29)
ctx.__lastFnCalled = 'SUM';
const _3 = ctx['SUM'](_2);
ctx.__lastFnCalled = 'ADD';
return ctx['ADD'](_1, _3);
}"
`;

exports[`expression compiler some arithmetic expressions 1`] = `
"function anonymous(deps,ref,range,ctx
) {
// =|N0|
return { value: this.constantValues.numbers[0] };
}"
`;

exports[`expression compiler some arithmetic expressions 2`] = `
"function anonymous(deps,ref,range,ctx
) {
// =true
return { value: true };
}"
`;

exports[`expression compiler some arithmetic expressions 3`] = `
"function anonymous(deps,ref,range,ctx
) {
// =|S0|
return { value: this.constantValues.strings[0] };
}"
`;

exports[`expression compiler some arithmetic expressions 4`] = `
"function anonymous(deps,ref,range,ctx
) {
// =|N0|+|N1|
const _1 = { value: this.constantValues.numbers[0] };
const _2 = { value: this.constantValues.numbers[1] };
ctx.__lastFnCalled = 'ADD';
return ctx['ADD'](_1, _2);
}"
`;

exports[`expression compiler some arithmetic expressions 5`] = `
"function anonymous(deps,ref,range,ctx
) {
// =|N0|*|N1|
const _1 = { value: this.constantValues.numbers[0] };
const _2 = { value: this.constantValues.numbers[1] };
ctx.__lastFnCalled = 'MULTIPLY';
return ctx['MULTIPLY'](_1, _2);
}"
`;

exports[`expression compiler some arithmetic expressions 6`] = `
"function anonymous(deps,ref,range,ctx
) {
// =|N0|-|N1|
const _1 = { value: this.constantValues.numbers[0] };
const _2 = { value: this.constantValues.numbers[1] };
ctx.__lastFnCalled = 'MINUS';
return ctx['MINUS'](_1, _2);
}"
`;

exports[`expression compiler some arithmetic expressions 7`] = `
"function anonymous(deps,ref,range,ctx
) {
// =|N0|/|N1|
const _1 = { value: this.constantValues.numbers[0] };
const _2 = { value: this.constantValues.numbers[1] };
ctx.__lastFnCalled = 'DIVIDE';
return ctx['DIVIDE'](_1, _2);
}"
`;

exports[`expression compiler some arithmetic expressions 8`] = `
"function anonymous(deps,ref,range,ctx
) {
// =-|N0|
const _1 = { value: this.constantValues.numbers[0] };
ctx.__lastFnCalled = 'UMINUS';
return ctx['UMINUS'](_1);
}"
`;

exports[`expression compiler some arithmetic expressions 9`] = `
"function anonymous(deps,ref,range,ctx
) {
// =(|N0|+|N1|)*(-|N1|+|N2|)
const _1 = { value: this.constantValues.numbers[0] };
const _2 = { value: this.constantValues.numbers[1] };
ctx.__lastFnCalled = 'ADD';
const _3 = ctx['ADD'](_1, _2);
const _4 = { value: this.constantValues.numbers[1] };
ctx.__lastFnCalled = 'UMINUS';
const _5 = ctx['UMINUS'](_4);
const _6 = { value: this.constantValues.numbers[2] };
ctx.__lastFnCalled = 'ADD';
const _7 = ctx['ADD'](_5, _6);
ctx.__lastFnCalled = 'MULTIPLY';
return ctx['MULTIPLY'](_3, _7);
}"
`;

exports[`expression compiler some arithmetic expressions 10`] = `
"function anonymous(deps,ref,range,ctx
) {
// =sum(|N0|,|N1|)
const _1 = { value: this.constantValues.numbers[0] };
const _2 = { value: this.constantValues.numbers[1] };
ctx.__lastFnCalled = 'SUM';
return ctx['SUM'](_1,_2);
}"
`;

exports[`expression compiler some arithmetic expressions 11`] = `
"function anonymous(deps,ref,range,ctx
) {
// =sum(true,|S0|)
const _1 = { value: true };
const _2 = { value: this.constantValues.strings[0] };
ctx.__lastFnCalled = 'SUM';
return ctx['SUM'](_1,_2);
}"
`;

exports[`expression compiler some arithmetic expressions 12`] = `
"function anonymous(deps,ref,range,ctx
) {
// =sum(|N0|,,|N1|)
const _1 = { value: this.constantValues.numbers[0] };
const _2 = undefined;
const _3 = { value: this.constantValues.numbers[1] };
ctx.__lastFnCalled = 'SUM';
return ctx['SUM'](_1,_2,_3);
}"
`;

exports[`expression compiler some arithmetic expressions 13`] = `
"function anonymous(deps,ref,range,ctx
) {
// =|N0|%
const _1 = { value: this.constantValues.numbers[0] };
ctx.__lastFnCalled = 'UNARY.PERCENT';
return ctx['UNARY.PERCENT'](_1);
}"
`;

exports[`expression compiler some arithmetic expressions 14`] = `
"function anonymous(deps,ref,range,ctx
) {
// =(|N0|+|N1|)%
const _1 = { value: this.constantValues.numbers[0] };
const _2 = { value: this.constantValues.numbers[1] };
ctx.__lastFnCalled = 'ADD';
const _3 = ctx['ADD'](_1, _2);
ctx.__lastFnCalled = 'UNARY.PERCENT';
return ctx['UNARY.PERCENT'](_3);
}"
`;

exports[`expression compiler some arithmetic expressions 15`] = `
"function anonymous(deps,ref,range,ctx
) {
// =|0|%
<<<<<<< HEAD
const _1 = ref(deps[0], false, \\"UNARY.PERCENT\\",  undefined);
=======
let _2 = ref(deps[0], false, "UNARY.PERCENT",  undefined);
>>>>>>> 4cca20db ([IMP] packages: upgrade jest to version 29)
ctx.__lastFnCalled = 'UNARY.PERCENT';
return ctx['UNARY.PERCENT'](_1);
}"
`;

exports[`expression compiler with the same reference multiple times 1`] = `
"function anonymous(deps,ref,range,ctx
) {
// =SUM(|0|,|0|,|2|)
const _1 = range(deps[0]);
const _2 = range(deps[0]);
const _3 = range(deps[2]);
ctx.__lastFnCalled = 'SUM';
return ctx['SUM'](_1,_2,_3);
}"
`;
